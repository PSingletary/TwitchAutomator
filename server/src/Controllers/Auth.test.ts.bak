import request from "supertest";
import { getApp } from "../app";

const app = getApp();

describe("Auth Controller", () => {
    describe("POST /auth/login", () => {
        it("should return 400 if already authenticated", async () => {
            const agent = request.agent(app);
            await agent.post("/api/v0/auth/login").send({ password: "test" });
            const response = await agent
                .post("/api/v0/auth/login")
                .send({ password: "test" });
            expect(response.status).toBe(400);
            expect(response.body.authenticated).toBe(true);
            expect(response.body.message).toBe(
                "You are already authenticated."
            );
        });

        it("should return 400 if no password set", async () => {
            const response = await request(app)
                .post("/api/v0/auth/login")
                .send({ password: "" });
            expect(response.status).toBe(400);
            expect(response.body.authenticated).toBe(false);
            expect(response.body.message).toBe("No password set.");
        });

        it("should return 401 if password is incorrect", async () => {
            const response = await request(app)
                .post("/api/v0/auth/login")
                .send({ password: "wrong" });
            expect(response.status).toBe(401);
            expect(response.body.authenticated).toBe(false);
            expect(response.body.message).toBe("Incorrect password.");
        });

        it("should return 200 if password is correct", async () => {
            const response = await request(app)
                .post("/api/v0/auth/login")
                .send({ password: "test" });
            expect(response.status).toBe(200);
            expect(response.body.authenticated).toBe(true);
            expect(response.body.message).toBe("Login successful.");
        });
    });

    describe("POST /auth/logout", () => {
        it("should return 200 if logged out successfully", async () => {
            const agent = request.agent(app);
            await agent.post("/api/v0/auth/login").send({ password: "test" });
            const response = await agent.post("/api/v0/auth/logout");
            expect(response.status).toBe(200);
            expect(response.body.authenticated).toBe(false);
            expect(response.body.message).toBe("Logout successful.");
        });
    });

    describe("GET /auth/check", () => {
        it("should return 200 if not password protected", async () => {
            const response = await request(app).get("/api/v0/auth/check");
            expect(response.status).toBe(200);
            expect(response.body.authentication).toBe(false);
            expect(response.body.authenticated).toBe(false);
            expect(response.body.message).toBe("No password protection.");
        });

        it("should return 200 if authenticated", async () => {
            const agent = request.agent(app);
            await agent.post("/api/v0/auth/login").send({ password: "test" });
            const response = await agent.get("/api/v0/auth/check");
            expect(response.status).toBe(200);
            expect(response.body.authentication).toBe(true);
            expect(response.body.authenticated).toBe(true);
            expect(response.body.guest_mode).toBe(false);
        });

        it("should return 200 if not authenticated", async () => {
            const response = await request(app).get("/api/v0/auth/check");
            expect(response.status).toBe(200);
            expect(response.body.authentication).toBe(true);
            expect(response.body.authenticated).toBe(false);
            expect(response.body.guest_mode).toBe(false);
        });
    });
});
